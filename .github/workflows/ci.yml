name: Scala CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
    tags: [v*]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '13', '14', '15' ]
        scala: [ '2.12.12' ]
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: print Java version
      run: java -version
    - uses: actions/cache@v1
      with:
        path: ~/.cache/coursier
        key: ${{ runner.os }}-scala-${{ matrix.scala }}-${{ hashFiles('**/*.sbt') }}
        restore-keys: |
          ${{ runner.os }}-scala-${{ matrix.scala }}-
    - name: Run tests
      run:  sbt ++${{ matrix.scala }} clean codegen/clean coverage checkFormatting testSuite codegen/coverageReport
    - uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./modules/codegen/target/scala-2.12/scoverage-report/scoverage.xml
        fail_ci_if_error: true
  publish:
    name: Publish release
    needs: [build]
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: print GnuPG version
        run: gpg --version
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Compile
        run: sbt compile
      - name: Publish artifacts
        run: sbt ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
